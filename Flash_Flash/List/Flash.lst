##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.41A/W32 EVALUATION    11/Dec/2009  16:53:49 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  arm                                                  #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Öóðêàí\ÓÊÇÌ_ïðîãðàììà\ÁÏÑ\SPA_Vibro\SPA_iar\Compi #
#                       l\Flash.c                                            #
#    Command line    =  D:\Öóðêàí\ÓÊÇÌ_ïðîãðàììà\ÁÏÑ\SPA_Vibro\SPA_iar\Compi #
#                       l\Flash.c -D ESS -lC D:\Öóðêàí\ÓÊÇÌ_ïðîãðàììà\ÁÏÑ\SP #
#                       A_Vibro\SPA_iar\Compil\Flash_Flash\List\ -lA         #
#                       D:\Öóðêàí\ÓÊÇÌ_ïðîãðàììà\ÁÏÑ\SPA_Vibro\SPA_iar\Compi #
#                       l\Flash_Flash\List\ -o D:\Öóðêàí\ÓÊÇÌ_ïðîãðàììà\ÁÏÑ\ #
#                       SPA_Vibro\SPA_iar\Compil\Flash_Flash\Obj\ -z9        #
#                       --debug --cpu_mode arm --endian little --cpu         #
#                       ARM7TDMI --stack_align 4 -e --fpu None               #
#                       --dlib_config "C:\Program Files\IAR                  #
#                       Systems\Embedded Workbench 4.0                       #
#                       Evaluation\ARM\LIB\dl4tpannl8n.h" -I                 #
#                       D:\Öóðêàí\ÓÊÇÌ_ïðîãðàììà\ÁÏÑ\SPA_Vibro\SPA_iar\Compi #
#                       l\srciar\ -I D:\Öóðêàí\ÓÊÇÌ_ïðîãðàììà\ÁÏÑ\SPA_Vibro\ #
#                       SPA_iar\Compil\..\..\ -I "C:\Program Files\IAR       #
#                       Systems\Embedded Workbench 4.0 Evaluation\ARM\INC\"  #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Öóðêàí\ÓÊÇÌ_ïðîãðàììà\ÁÏÑ\SPA_Vibro\SPA_iar\Compi #
#                       l\Flash_Flash\List\Flash.lst                         #
#    Object file     =  D:\Öóðêàí\ÓÊÇÌ_ïðîãðàììà\ÁÏÑ\SPA_Vibro\SPA_iar\Compi #
#                       l\Flash_Flash\Obj\Flash.r79                          #
#                                                                            #
#                                                                            #
##############################################################################

D:\Öóðêàí\ÓÊÇÌ_ïðîãðàììà\ÁÏÑ\SPA_Vibro\SPA_iar\Compil\Flash.c
      1          //*----------------------------------------------------------------------------
      2          //*         ATMEL Microcontroller Software Support  -  ROUSSET  -
      3          //*----------------------------------------------------------------------------
      4          //* The software is delivered "AS IS" without warranty or condition of any
      5          //* kind, either express, implied or statutory. This includes without
      6          //* limitation any warranty or condition with respect to merchantability or
      7          //* fitness for any particular purpose, or against the infringements of
      8          //* intellectual property rights of others.
      9          //*----------------------------------------------------------------------------
     10          //* File Name           : Flash.c
     11          //* Object              : Flash routine
     12          //* Creation            : JPP   30/Jun/2004
     13          //* Modif               : JPM   16/Nov/2004 Flash write status
     14          //* 1.1   12/Sep/05 JPP : Change MC_FMR Setting
     15          //*----------------------------------------------------------------------------
     16          
     17          // Include Standard files
     18          #include "Board.h"
     19          #include "Flash.h"
     20          
     21          extern  void AT91F_disable_interrupt(void);
     22          extern  void AT91F_enable_interrupt(void);
     23          
     24          
     25          //*----------------------------------------------------------------------------
     26          //* \fn    AT91F_Flash_Init
     27          //* \brief Flash init
     28          //*----------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     29          void AT91F_Flash_Init (void)
     30          {
     31              //* Set number of Flash Waite sate
     32              //  SAM7S64 features Single Cycle Access at Up to 30 MHz
     33              //  if MCK = 47923200, 72 Cycles for 1 µseconde ( field MC_FMR->FMCN)
     34                  AT91C_BASE_MC->MC_FMR = ((AT91C_MC_FMCN)&(72 <<16)) | AT91C_MC_FWS_1FWS ;
   \                     AT91F_Flash_Init:
   \   00000000   9F00E0E3           MVN      R0,#+159
   \   00000004   4818A0E3           MOV      R1,#+4718592
   \   00000008   ........           B        ?Subroutine0
     35          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine0:
   \   00000000   401F81E3           ORR      R1,R1,#0x100
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   0EF0A0E1           MOV      PC,LR            ;; return
     36          //*----------------------------------------------------------------------------
     37          //* \fn    AT91F_Flash_Init
     38          //* \brief Flash init
     39          //*----------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     40          void AT91F_NVM_Init (void)
     41          {
     42              //* Set number of Flash Waite sate
     43              //  SAM7S64 features Single Cycle Access at Up to 30 MHz
     44              //  if MCK = 47923200, 48 Cycles for 1 µseconde ( field MC_FMR->FMCN)
     45                  AT91C_BASE_MC->MC_FMR = ((AT91C_MC_FMCN)&(48 <<16)) | AT91C_MC_FWS_1FWS ;
   \                     AT91F_NVM_Init:
   \   00000000   9F00E0E3           MVN      R0,#+159
   \   00000004   C019A0E3           MOV      R1,#+3145728
   \   00000008                      REQUIRE ?Subroutine0
   \   00000008                      ;; // Fall through to label ?Subroutine0
     46          }
     47          
     48          //*----------------------------------------------------------------------------
     49          //* \fn    AT91F_Flash_Ready
     50          //* \brief Wait the flash ready
     51          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
     52          __ramfunc int AT91F_Flash_Ready (void)
     53          {
     54              unsigned int status;
     55              status = 0;
     56          
     57              //* Wait the end of command
     58                  while ((status & AT91C_MC_FRDY) != AT91C_MC_FRDY )
     59                  {
     60                    status = AT91C_BASE_MC->MC_FSR;
   \                     AT91F_Flash_Ready:
   \                     ??AT91F_Flash_Ready_0:
   \   00000000   9700E0E3           MVN      R0,#+151
   \   00000004   000090E5           LDR      R0,[R0, #+0]
     61                  }
   \   00000008   010010E3           TST      R0,#0x1
   \   0000000C   FBFFFF0A           BEQ      ??AT91F_Flash_Ready_0
     62                  return status;
   \   00000010   0EF0A0E1           MOV      PC,LR            ;; return
     63          }
     64          
     65          //*----------------------------------------------------------------------------
     66          //* \fn    AT91F_Flash_Lock_Status
     67          //* \brief Get the Lock bits field status
     68          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
     69          __ramfunc int AT91F_Flash_Lock_Status(void)
     70          {
     71            return (AT91C_BASE_MC->MC_FSR & AT91C_MC_FSR_LOCK);
   \                     AT91F_Flash_Lock_Status:
   \   00000000   9700E0E3           MVN      R0,#+151
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   2008A0E1           LSR      R0,R0,#+16
   \   0000000C   0008A0E1           LSL      R0,R0,#+16
   \   00000010   0EF0A0E1           MOV      PC,LR            ;; return
     72          }
     73          //*----------------------------------------------------------------------------
     74          //* \fn    AT91F_Flash_Lock
     75          //* \brief Write the lock bit and set at 0 FSR Bit = 1
     76          //* \input page number (0-1023)
     77          //* \output Region
     78          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
     79          __ramfunc int AT91F_Flash_Lock (unsigned int Flash_Lock_Page)
     80          {
   \                     AT91F_Flash_Lock:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     81              //* set the Flash controller base address
     82                  AT91PS_MC ptMC = AT91C_BASE_MC;
     83          
     84                  AT91F_NVM_Init();
   \   00000008   9F00E0E3           MVN      R0,#+159
   \   0000000C   C019A0E3           MOV      R1,#+3145728
   \   00000010   401F81E3           ORR      R1,R1,#0x100
   \   00000014   001080E5           STR      R1,[R0, #+0]
     85              //* write the flash
     86          	//* Protect
     87          		AT91F_disable_interrupt();
                 		                         ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_disable_interrupt)
          from within a __ramfunc function
   \   00000018   ........           _BLF     AT91F_disable_interrupt,??AT91F_disable_interrupt??rA?CODE_I
     88              //* Write the Set Lock Bit command
     89                  ptMC->MC_FCR = AT91C_MC_CORRECT_KEY | AT91C_MC_FCMD_LOCK | (AT91C_MC_PAGEN & (Flash_Lock_Page << 8) ) ;
   \   0000001C   9B00E0E3           MVN      R0,#+155
   \   00000020   C01BA0E3           MOV      R1,#+196608
   \   00000024   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000028   041401E0           AND      R1,R1,R4, LSL #+8
   \   0000002C   0220A0E3           MOV      R2,#+2
   \   00000030   ........           B        ?Subroutine1
     90          
     91              //* Wait the end of command
     92                   AT91F_Flash_Ready();
     93              //* Protect
     94          		AT91F_enable_interrupt();
                 		                        ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_enable_interrupt) from
          within a __ramfunc function
     95          
     96          
     97            return (AT91F_Flash_Lock_Status());
     98          }

   \                                 In segment CODE_I, align 4, keep-with-next
   \                     ?Subroutine1:
   \   00000000   5A2482E3           ORR      R2,R2,#0x5A000000
   \   00000004   011082E1           ORR      R1,R2,R1
   \   00000008   001080E5           STR      R1,[R0, #+0]
   \   0000000C   ........           BL       AT91F_Flash_Ready
   \   00000010   ........           _BLF     AT91F_enable_interrupt,??AT91F_enable_interrupt??rA?CODE_I
   \   00000014   9700E0E3           MVN      R0,#+151
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   2008A0E1           LSR      R0,R0,#+16
   \   00000020   0008A0E1           LSL      R0,R0,#+16
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
     99          //*----------------------------------------------------------------------------
    100          //* \fn    AT91F_Flash_Unlock
    101          //* \brief Clear the lock bit and set at 1 FSR bit=0
    102          //* \input page number (0-1023)
    103          //* \output Region
    104          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
    105          __ramfunc int AT91F_Flash_Unlock(unsigned int Flash_Lock_Page)
    106          {
   \                     AT91F_Flash_Unlock:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    107          	    AT91F_NVM_Init();
   \   00000008   9F00E0E3           MVN      R0,#+159
   \   0000000C   C019A0E3           MOV      R1,#+3145728
   \   00000010   401F81E3           ORR      R1,R1,#0x100
   \   00000014   001080E5           STR      R1,[R0, #+0]
    108          
    109          	//* Protect
    110          		AT91F_disable_interrupt();
                 		                         ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_disable_interrupt)
          from within a __ramfunc function
   \   00000018   ........           _BLF     AT91F_disable_interrupt,??AT91F_disable_interrupt??rA?CODE_I
    111              //* Write the Clear Lock Bit command
    112                  AT91C_BASE_MC->MC_FCR = AT91C_MC_CORRECT_KEY | AT91C_MC_FCMD_UNLOCK | (AT91C_MC_PAGEN & (Flash_Lock_Page << 8) ) ;
   \   0000001C   9B00E0E3           MVN      R0,#+155
   \   00000020   C01BA0E3           MOV      R1,#+196608
   \   00000024   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000028   041401E0           AND      R1,R1,R4, LSL #+8
   \   0000002C   0420A0E3           MOV      R2,#+4
   \   00000030                      REQUIRE ?Subroutine1
   \   00000030                      ;; // Fall through to label ?Subroutine1
    113          
    114              //* Wait the end of command
    115                  AT91F_Flash_Ready();
    116              //* Protect
    117          		AT91F_enable_interrupt();
                 		                        ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_enable_interrupt) from
          within a __ramfunc function
    118          
    119            return (AT91F_Flash_Lock_Status());
    120          }
    121          
    122          
    123          //*----------------------------------------------------------------------------
    124          //* \fn    AT91F_Flash_Erase_All
    125          //* \brief Send command erase all flash
    126          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
    127          __ramfunc int AT91F_Flash_Erase_All(void)
    128          {
   \                     AT91F_Flash_Erase_All:
   \   00000000   00402DE9           PUSH     {LR}
    129                  AT91F_Flash_Init();
   \   00000004   9F00E0E3           MVN      R0,#+159
   \   00000008   4818A0E3           MOV      R1,#+4718592
   \   0000000C   401F81E3           ORR      R1,R1,#0x100
   \   00000010   001080E5           STR      R1,[R0, #+0]
    130          	//* Protect
    131          		AT91F_disable_interrupt();
                 		                         ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_disable_interrupt)
          from within a __ramfunc function
   \   00000014   ........           _BLF     AT91F_disable_interrupt,??AT91F_disable_interrupt??rA?CODE_I
    132              //* set the Flash controller base address
    133                  AT91PS_MC ptMC = AT91C_BASE_MC;
    134              //* Write the Erase All command
    135                  ptMC->MC_FCR = AT91C_MC_CORRECT_KEY | AT91C_MC_FCMD_ERASE_ALL ;
   \   00000018   9B00E0E3           MVN      R0,#+155
   \   0000001C   0810A0E3           MOV      R1,#+8
   \   00000020   5A1481E3           ORR      R1,R1,#0x5A000000
   \   00000024   001080E5           STR      R1,[R0, #+0]
    136              //* Wait the end of command
    137                  AT91F_Flash_Ready();
   \   00000028   ........           BL       AT91F_Flash_Ready
    138             //* Protect
    139          		AT91F_enable_interrupt();
                 		                        ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_enable_interrupt) from
          within a __ramfunc function
   \   0000002C   ........           _BLF     AT91F_enable_interrupt,??AT91F_enable_interrupt??rA?CODE_I
    140              //* Check the result
    141                  return ( (ptMC->MC_FSR & ( AT91C_MC_PROGE | AT91C_MC_LOCKE ))==0) ;
   \   00000030   9700E0E3           MVN      R0,#+151
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   0C0010E3           TST      R0,#0xC
   \   0000003C   0100A003           MOVEQ    R0,#+1
   \   00000040   0080BD08           POPEQ    {PC}
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   0080BDE8           POP      {PC}             ;; return
    142          }
    143          
    144          //*----------------------------------------------------------------------------
    145          //* \fn    AT91F_Flash_Write
    146          //* \brief Write in one Flash page located in AT91C_IFLASH,  size in 32 bits
    147          //* \input Flash_Address: start at 0x0010 0000 size: in byte
    148          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
    149          __ramfunc int AT91F_Flash_Write( unsigned int Flash_Address ,int size ,unsigned int * buff)
    150          {
   \                     AT91F_Flash_Write:
   \   00000000   10402DE9           PUSH     {R4,LR}
    151              //* set the Flash controller base address
    152              AT91PS_MC ptMC = AT91C_BASE_MC;
    153              unsigned int i, page, status;
    154              unsigned int * Flash;
    155              //* init flash pointer
    156                  Flash = (unsigned int *) Flash_Address;
    157          
    158                  AT91F_Flash_Init();
   \   00000004   9F30E0E3           MVN      R3,#+159
   \   00000008   4848A0E3           MOV      R4,#+4718592
   \   0000000C   404F84E3           ORR      R4,R4,#0x100
   \   00000010   004083E5           STR      R4,[R3, #+0]
    159             //* Get the Flash page number
    160                  page = ((Flash_Address - (unsigned int)AT91C_IFLASH ) /FLASH_PAGE_SIZE_BYTE);
   \   00000014   403940E2           SUB      R3,R0,#+1048576
   \   00000018   A343A0E1           LSR      R4,R3,#+7
    161             //* copy the new value
    162          	for (i=0; (i < FLASH_PAGE_SIZE_BYTE) & (size > 0) ;i++, Flash++,buff++,size-=4 ){
   \   0000001C   0030A0E3           MOV      R3,#+0
   \                     ??AT91F_Flash_Write_0:
   \   00000020   010051E3           CMP      R1,#+1
   \   00000024   050000BA           BLT      ??AT91F_Flash_Write_1
    163          	//* copy the flash to the write buffer ensuring code generation
    164          	    *Flash=*buff;
   \   00000028   ........           LDR      R12,[R2], #+4
   \   0000002C   ........           STR      R12,[R0], #+4
    165          	}
   \   00000030   013083E2           ADD      R3,R3,#+1
   \   00000034   041041E2           SUB      R1,R1,#+4
   \   00000038   800053E3           CMP      R3,#+128
   \   0000003C   F7FFFF3A           BCC      ??AT91F_Flash_Write_0
    166          	//* Protect
    167          		AT91F_disable_interrupt();
                 		                         ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_disable_interrupt)
          from within a __ramfunc function
   \                     ??AT91F_Flash_Write_1:
   \   00000040   ........           _BLF     AT91F_disable_interrupt,??AT91F_disable_interrupt??rA?CODE_I
    168              //* Write the write page command
    169                  ptMC->MC_FCR = AT91C_MC_CORRECT_KEY | AT91C_MC_FCMD_START_PROG | (AT91C_MC_PAGEN & (page <<8)) ;
   \   00000044   9B00E0E3           MVN      R0,#+155
   \   00000048   C01BA0E3           MOV      R1,#+196608
   \   0000004C   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000050   041401E0           AND      R1,R1,R4, LSL #+8
   \   00000054   0120A0E3           MOV      R2,#+1
   \   00000058   5A2482E3           ORR      R2,R2,#0x5A000000
   \   0000005C   011082E1           ORR      R1,R2,R1
   \   00000060   001080E5           STR      R1,[R0, #+0]
    170              //* Wait the end of command
    171                  status = AT91F_Flash_Ready();
   \   00000064   ........           BL       AT91F_Flash_Ready
   \   00000068   0040A0E1           MOV      R4,R0
    172              //* Protect
    173          		AT91F_enable_interrupt();
                 		                        ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_enable_interrupt) from
          within a __ramfunc function
   \   0000006C   ........           _BLF     AT91F_enable_interrupt,??AT91F_enable_interrupt??rA?CODE_I
    174          
    175              //* Check the result
    176              if ( (status & ( AT91C_MC_PROGE | AT91C_MC_LOCKE ))!=0) return false;
   \   00000070   0C0014E3           TST      R4,#0xC
   \   00000074   0000A013           MOVNE    R0,#+0
   \   00000078   1080BD18           POPNE    {R4,PC}
    177            return true;
   \   0000007C   0000E0E3           MVN      R0,#+0
   \   00000080   1080BDE8           POP      {R4,PC}          ;; return
    178          }
    179          
    180          
    181          
    182          //*----------------------------------------------------------------------------
    183          //* \fn    AT91F_NVM_Status
    184          //* \brief Get the NVM field status
    185          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
    186          __ramfunc int AT91F_NVM_Status(void)
    187          {
    188            return (AT91C_BASE_MC->MC_FSR & AT91C_MC_FSR_MVM);
   \                     AT91F_NVM_Status:
   \   00000000   9700E0E3           MVN      R0,#+151
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   FF0C00E2           AND      R0,R0,#0xFF00
   \   0000000C   0EF0A0E1           MOV      PC,LR            ;; return
    189          }
    190          
    191          //*----------------------------------------------------------------------------
    192          //* \fn    AT91F_NVM_Set
    193          //* \brief Write the Non Volatile Memory Bits and set at 0 FSR Bit = 1
    194          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
    195          __ramfunc int AT91F_NVM_Set (unsigned char NVM_Number)
    196          {
   \                     AT91F_NVM_Set:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    197                  AT91F_NVM_Init();
   \   00000008   9F00E0E3           MVN      R0,#+159
   \   0000000C   C019A0E3           MOV      R1,#+3145728
   \   00000010   401F81E3           ORR      R1,R1,#0x100
   \   00000014   001080E5           STR      R1,[R0, #+0]
    198              //* set the Flash controller base address
    199                  AT91PS_MC ptMC = AT91C_BASE_MC;
    200          	//* Protect
    201          		AT91F_disable_interrupt();
                 		                         ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_disable_interrupt)
          from within a __ramfunc function
   \   00000018   ........           _BLF     AT91F_disable_interrupt,??AT91F_disable_interrupt??rA?CODE_I
    202          
    203          	 //* write the flash
    204              //* Write the Set NVM Bit command
    205                  ptMC->MC_FCR = AT91C_MC_CORRECT_KEY | AT91C_MC_FCMD_SET_GP_NVM | (AT91C_MC_PAGEN & (NVM_Number << 8) ) ;
   \   0000001C   9B00E0E3           MVN      R0,#+155
   \   00000020   0B10A0E3           MOV      R1,#+11
   \   00000024   ........           B        ?Subroutine2
    206          
    207              //* Wait the end of command
    208                  AT91F_Flash_Ready();
    209              //* Protect
    210          		AT91F_enable_interrupt();
                 		                        ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_enable_interrupt) from
          within a __ramfunc function
    211          
    212            return (AT91F_NVM_Status());
    213          }

   \                                 In segment CODE_I, align 4, keep-with-next
   \                     ?Subroutine2:
   \   00000000   5A1481E3           ORR      R1,R1,#0x5A000000
   \   00000004   041481E1           ORR      R1,R1,R4, LSL #+8
   \   00000008   001080E5           STR      R1,[R0, #+0]
   \   0000000C   ........           BL       AT91F_Flash_Ready
   \   00000010   ........           _BLF     AT91F_enable_interrupt,??AT91F_enable_interrupt??rA?CODE_I
   \   00000014   9700E0E3           MVN      R0,#+151
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   FF0C00E2           AND      R0,R0,#0xFF00
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
    214          //*----------------------------------------------------------------------------
    215          //* \fn    AT91F_NVM_Clear
    216          //* \brief Clear the Non Volatile Memory Bits and set at 1 FSR bit=0
    217          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
    218          __ramfunc int AT91F_NVM_Clear(unsigned char NVM_Number)
    219          {
   \                     AT91F_NVM_Clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    220                  AT91F_NVM_Init();
   \   00000008   9F00E0E3           MVN      R0,#+159
   \   0000000C   C019A0E3           MOV      R1,#+3145728
   \   00000010   401F81E3           ORR      R1,R1,#0x100
   \   00000014   001080E5           STR      R1,[R0, #+0]
    221              //* set the Flash controller base address
    222                  AT91PS_MC ptMC = AT91C_BASE_MC;
    223          
    224          	//* Protect
    225          		AT91F_disable_interrupt();
                 		                         ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_disable_interrupt)
          from within a __ramfunc function
   \   00000018   ........           _BLF     AT91F_disable_interrupt,??AT91F_disable_interrupt??rA?CODE_I
    226          	 //* write the flash
    227              //* Write the Clear NVM Bit command
    228                  ptMC->MC_FCR = AT91C_MC_CORRECT_KEY | AT91C_MC_FCMD_CLR_GP_NVM | (AT91C_MC_PAGEN & (NVM_Number << 8) ) ;
   \   0000001C   9B00E0E3           MVN      R0,#+155
   \   00000020   0D10A0E3           MOV      R1,#+13
   \   00000024                      REQUIRE ?Subroutine2
   \   00000024                      ;; // Fall through to label ?Subroutine2
    229          
    230              //* Wait the end of command
    231                 AT91F_Flash_Ready();
    232              //* Protect
    233          		AT91F_enable_interrupt();
                 		                        ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_enable_interrupt) from
          within a __ramfunc function
    234          
    235          
    236            return (AT91F_NVM_Status());
    237          }
    238          
    239          //*----------------------------------------------------------------------------
    240          //* \fn    AT91F_SET_Security_Status
    241          //* \brief Get Flash Security Bit Status
    242          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
    243          __ramfunc int AT91F_SET_Security_Status (void)
    244          {
    245            return (AT91C_BASE_MC->MC_FSR & AT91C_MC_SECURITY);
   \                     AT91F_SET_Security_Status:
   \   00000000   9700E0E3           MVN      R0,#+151
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   100000E2           AND      R0,R0,#0x10
   \   0000000C   0EF0A0E1           MOV      PC,LR            ;; return
    246          }
    247          
    248          //*----------------------------------------------------------------------------
    249          //* \fn AT91F_SET_Security
    250          //* \brief Set Flash Security Bit
    251          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
    252          __ramfunc int AT91F_SET_Security (void)
    253          {
   \                     AT91F_SET_Security:
   \   00000000   00402DE9           PUSH     {LR}
    254                  AT91F_NVM_Init();
   \   00000004   9F00E0E3           MVN      R0,#+159
   \   00000008   C019A0E3           MOV      R1,#+3145728
   \   0000000C   401F81E3           ORR      R1,R1,#0x100
   \   00000010   001080E5           STR      R1,[R0, #+0]
    255          	//* Protect
    256          		AT91F_disable_interrupt();
                 		                         ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_disable_interrupt)
          from within a __ramfunc function
   \   00000014   ........           _BLF     AT91F_disable_interrupt,??AT91F_disable_interrupt??rA?CODE_I
    257          	 //* write the flash
    258              //* Write the Set Security Bit command
    259                  AT91C_BASE_MC->MC_FCR = ( AT91C_MC_CORRECT_KEY | AT91C_MC_FCMD_SET_SECURITY ) ;
   \   00000018   9B00E0E3           MVN      R0,#+155
   \   0000001C   0F10A0E3           MOV      R1,#+15
   \   00000020   5A1481E3           ORR      R1,R1,#0x5A000000
   \   00000024   001080E5           STR      R1,[R0, #+0]
    260          
    261              //* Wait the end of command
    262                 AT91F_Flash_Ready();
   \   00000028   ........           BL       AT91F_Flash_Ready
    263              //* Protect
    264          		AT91F_enable_interrupt();
                 		                        ^
Warning[Ta023]: Call to a non __ramfunc function (AT91F_enable_interrupt) from
          within a __ramfunc function
   \   0000002C   ........           _BLF     AT91F_enable_interrupt,??AT91F_enable_interrupt??rA?CODE_I
    265          
    266            return (AT91F_SET_Security_Status());
   \   00000030   9700E0E3           MVN      R0,#+151
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   100000E2           AND      R0,R0,#0x10
   \   0000003C   0080BDE8           POP      {PC}             ;; return
    267          }
    268          //*----------------------------------------------------------------------------
    269          //* \fn    AT91F_Flash_Check_Erase
    270          //* \brief Check the memory at 0xFF in 32 bits access
    271          //*----------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    272          int AT91F_Flash_Check_Erase (unsigned int * start, unsigned int size)
    273          {
    274          	unsigned int i;
    275              //* Check if flash is erased
    276          	for (i=0; i < (size/4) ; i++ )
   \                     AT91F_Flash_Check_Erase:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   000000EA           B        ??AT91F_Flash_Check_Erase_0
   \                     ??AT91F_Flash_Check_Erase_1:
   \   00000008   012082E2           ADD      R2,R2,#+1
   \                     ??AT91F_Flash_Check_Erase_0:
   \   0000000C   210152E1           CMP      R2,R1, LSR #+2
   \   00000010   0400002A           BCS      ??AT91F_Flash_Check_Erase_2
    277          	{
    278          	    if ( start[i] != ERASE_VALUE ) return  false;
   \   00000014   023190E7           LDR      R3,[R0, +R2, LSL #+2]
   \   00000018   010073E3           CMN      R3,#+1
   \   0000001C   F9FFFF0A           BEQ      ??AT91F_Flash_Check_Erase_1
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   0EF0A0E1           MOV      PC,LR
    279          	}
    280          	return true ;
   \                     ??AT91F_Flash_Check_Erase_2:
   \   00000028   0000E0E3           MVN      R0,#+0
   \   0000002C   0EF0A0E1           MOV      PC,LR            ;; return
    281          }
    282          
    283          //*----------------------------------------------------------------------------
    284          //* \fn    AT91F_Flash_Write_all
    285          //* \brief Write in one Flash page located in AT91C_IFLASH,  size in byte
    286          //* \input Start address (base=AT91C_IFLASH) size (in byte ) and buff address
    287          //*----------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    288          int AT91F_Flash_Write_all( unsigned int Flash_Address ,int size ,unsigned int * buff)
    289          {
   \                     AT91F_Flash_Write_all:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    290          
    291              int   next, status;
    292              unsigned int  dest;
    293              unsigned int * src;
    294          
    295              dest = Flash_Address;
    296              src = buff;
    297              status = true;
   \   00000010   0000E0E3           MVN      R0,#+0
   \                     ??AT91F_Flash_Write_all_0:
   \   00000014   010055E3           CMP      R5,#+1
   \   00000018   F080BDB8           POPLT    {R4-R7,PC}
    298          
    299              while( (status == true) & (size > 0) )
    300          	{
    301                  //* Check the size
    302                  if (size <= FLASH_PAGE_SIZE_BYTE) next = size;
   \   0000001C   810055E3           CMP      R5,#+129
   \   00000020   0570A0B1           MOVLT    R7,R5
    303                  else next = FLASH_PAGE_SIZE_BYTE;
   \   00000024   8070A0A3           MOVGE    R7,#+128
    304          
    305                  //* Unlock current sector base address - current address by sector size
    306                  AT91F_Flash_Unlock((dest - (unsigned int)AT91C_IFLASH ) /FLASH_PAGE_SIZE_BYTE);
   \   00000028   400944E2           SUB      R0,R4,#+1048576
   \   0000002C   A003A0E1           LSR      R0,R0,#+7
   \   00000030   ........           _BLF     AT91F_Flash_Unlock,??AT91F_Flash_Unlock??rA
    307          
    308                  //* Write page and get status
    309                  status = AT91F_Flash_Write( dest ,next ,src);
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   0710A0E1           MOV      R1,R7
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     AT91F_Flash_Write,??AT91F_Flash_Write??rA
    310                  // * get next page param
    311                  size -= next;
   \   00000044   075045E0           SUB      R5,R5,R7
    312                  src += FLASH_PAGE_SIZE_BYTE/4;
   \   00000048   806086E2           ADD      R6,R6,#+128
    313                  dest +=  FLASH_PAGE_SIZE_BYTE;
   \   0000004C   804084E2           ADD      R4,R4,#+128
    314          	}
   \   00000050   010070E3           CMN      R0,#+1
   \   00000054   EEFFFF0A           BEQ      ??AT91F_Flash_Write_all_0
    315              return status;
   \   00000058   F080BDE8           POP      {R4-R7,PC}       ;; return
    316          }

   Maximum stack usage in bytes:

     Function                  CSTACK
     --------                  ------
     AT91F_Flash_Check_Erase       0
     AT91F_Flash_Erase_All         4
     AT91F_Flash_Init              0
     AT91F_Flash_Lock              8
     AT91F_Flash_Lock_Status       0
     AT91F_Flash_Ready             0
     AT91F_Flash_Unlock            8
     AT91F_Flash_Write             8
     AT91F_Flash_Write_all        20
     AT91F_NVM_Clear               8
     AT91F_NVM_Init                0
     AT91F_NVM_Set                 8
     AT91F_NVM_Status              0
     AT91F_SET_Security            4
     AT91F_SET_Security_Status     0


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     AT91F_Flash_Init            12
     ?Subroutine0                12
     AT91F_NVM_Init               8
     ??AT91F_Flash_Ready_0       20
     AT91F_Flash_Lock_Status     20
     AT91F_Flash_Lock            52
     ?Subroutine1                40
     AT91F_Flash_Unlock          48
     AT91F_Flash_Erase_All       76
     AT91F_Flash_Write          132
     AT91F_NVM_Status            16
     AT91F_NVM_Set               40
     ?Subroutine2                36
     AT91F_NVM_Clear             36
     AT91F_SET_Security_Status   16
     AT91F_SET_Security          64
     AT91F_Flash_Check_Erase     48
     AT91F_Flash_Write_all       92
      Others                     60

 
 196 bytes in segment CODE
 620 bytes in segment CODE_I
  12 bytes in segment INITTAB
 
 768 bytes of CODE memory (+ 60 bytes shared)

Errors: none
Warnings: 14
