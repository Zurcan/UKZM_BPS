##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.40A/W32 EVALUATION    12/Oct/2006  15:23:01 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
# Time limited license: 29 days left                                         #
#                                                                            #
#    Cpu mode        =  arm                                                  #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\SPA_iar\Compil\SrcIAR\Cstartup_SAM7.c             #
#    Command line    =  C:\SPA_iar\Compil\SrcIAR\Cstartup_SAM7.c -D ESS -lC  #
#                       C:\SPA_iar\Compil\Flash_Flash\List\ -lA              #
#                       C:\SPA_iar\Compil\Flash_Flash\List\ -o               #
#                       C:\SPA_iar\Compil\Flash_Flash\Obj\ -z9 --debug       #
#                       --cpu_mode arm --endian little --cpu ARM7TDMI        #
#                       --stack_align 4 -e --fpu None --dlib_config          #
#                       "C:\Program Files\IAR Systems\Embedded Workbench     #
#                       4.0 Evaluation\ARM\LIB\dl4tpannl8n.h" -I             #
#                       C:\SPA_iar\Compil\srciar\ -I                         #
#                       C:\SPA_iar\Compil\..\..\ -I "C:\Program Files\IAR    #
#                       Systems\Embedded Workbench 4.0 Evaluation\ARM\INC\"  #
#    List file       =  C:\SPA_iar\Compil\Flash_Flash\List\Cstartup_SAM7.lst #
#    Object file     =  C:\SPA_iar\Compil\Flash_Flash\Obj\Cstartup_SAM7.r79  #
#                                                                            #
#                                                                            #
##############################################################################

C:\SPA_iar\Compil\SrcIAR\Cstartup_SAM7.c
      1          //*----------------------------------------------------------------------------
      2          //*         ATMEL Microcontroller Software Support  -  ROUSSET  -
      3          //*----------------------------------------------------------------------------
      4          //* The software is delivered "AS IS" without warranty or condition of any
      5          //* kind, either express, implied or statutory. This includes without
      6          //* limitation any warranty or condition with respect to merchantability or
      7          //* fitness for any particular purpose, or against the infringements of
      8          //* intellectual property rights of others.
      9          //*----------------------------------------------------------------------------
     10          //* File Name           : Cstartup_SAM7.c
     11          //* Object              : Low level initializations written in C for Tools
     12          //* Creation            : 12/Jun/04
     13          //* 1.2   28/Feb/05 JPP : LIB change AT91C_WDTC_WDDIS & PLL
     14          //* 1.3   21/Mar/05 JPP : Change PLL Wait time
     15          //* 1.4   21/Aug/05 JPP : Change MC_FMR Setting
     16          //* 1.5   29/Aug/05 JPP : Change PLL error
     17          //* 1.6   13/oct/05 JPP : Change comment
     18          //*----------------------------------------------------------------------------
     19          
     20          // Include the board file description
     21          #include "Board.h"
     22          
     23          // The following functions must be write in ARM mode this function called directly
     24          // by exception vector
     25          extern void AT91F_Spurious_handler(void);
     26          extern void AT91F_Default_IRQ_handler(void);
     27          extern void AT91F_Default_FIQ_handler(void);
     28          
     29          //*----------------------------------------------------------------------------
     30          //* \fn    AT91F_LowLevelInit
     31          //* \brief This function performs very low level HW initialization
     32          //*        this function can be use a Stack, depending the compilation
     33          //*        optimization mode
     34          //*----------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     35          void AT91F_LowLevelInit(void)
     36          {
     37           int            i;
     38           AT91PS_PMC     pPMC = AT91C_BASE_PMC;
     39              //* Set Flash Waite sate
     40          	//  Single Cycle Access at Up to 30 MHz, or 40
     41          	AT91C_BASE_MC->MC_FMR = 0x00500100;//AT91C_MC_FWS_1FWS ;
   \                     AT91F_LowLevelInit:
   \   00000000   9F00E0E3           MVN      R0,#+159
   \   00000004   5018A0E3           MOV      R1,#+5242880
   \   00000008   401F81E3           ORR      R1,R1,#0x100
   \   0000000C   ........           STR      R1,[R0], #-540
     42          
     43              //* Watchdog Disable
     44                  AT91C_BASE_WDTC->WDTC_WDMR= AT91C_WDTC_WDDIS;
   \   00000010   801CA0E3           MOV      R1,#+32768
   \   00000014   ........           STR      R1,[R0], #-292
     45          
     46              // 1 Enabling the Main Oscillator:
     47                  // SCK = 1/32768 = 30.51 uSecond
     48              	// Start up time = 8 * 6 / SCK = 56 * 30.51 = 1,46484375 ms
     49                 pPMC->PMC_MOR = (( AT91C_CKGR_OSCOUNT & (0x06 <<8) | AT91C_CKGR_MOSCEN ));
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   601E81E3           ORR      R1,R1,#0x600
   \   00000020   001080E5           STR      R1,[R0, #+0]
     50                  // Wait the startup time
     51                  while(!(pPMC->PMC_SR & AT91C_PMC_MOSCS));
   \                     ??AT91F_LowLevelInit_0:
   \   00000024   9700E0E3           MVN      R0,#+151
   \   00000028   C00FC0E3           BIC      R0,R0,#0x300
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   010010E3           TST      R0,#0x1
   \   00000034   FAFFFF0A           BEQ      ??AT91F_LowLevelInit_0
     52          	// 2 Checking the Main Oscillator Frequency (Optional)
     53          	// 3 Setting PLL and divider:
     54          		// - div by 5 Fin = 3686400
     55          		// - Mul 13+1: Fout =	51609600
     56          		// Field out NOT USED = 0
     57          		// PLLCOUNT pll startup time estimate at : 0.844 ms
     58          		// PLLCOUNT 28 = 0.000844 /(1/32768)
     59                 pPMC->PMC_PLLR = ((AT91C_CKGR_DIV & 5 ) |
     60                                   (AT91C_CKGR_PLLCOUNT & (28<<8)) |
     61                                   (AT91C_CKGR_MUL & (13<<16)));
   \   00000038   D300E0E3           MVN      R0,#+211
   \   0000003C   C00FC0E3           BIC      R0,R0,#0x300
   \   00000040   A8109FE5           LDR      R1,??AT91F_LowLevelInit_1  ;; 0xd1c05
   \   00000044   001080E5           STR      R1,[R0, #+0]
     62          
     63                  // Wait the startup time
     64                  while(!(pPMC->PMC_SR & AT91C_PMC_LOCK));
   \                     ??AT91F_LowLevelInit_2:
   \   00000048   9700E0E3           MVN      R0,#+151
   \   0000004C   C00FC0E3           BIC      R0,R0,#0x300
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   040010E3           TST      R0,#0x4
   \   00000058   FAFFFF0A           BEQ      ??AT91F_LowLevelInit_2
     65                  while(!(pPMC->PMC_SR & AT91C_PMC_MCKRDY));
   \                     ??AT91F_LowLevelInit_3:
   \   0000005C   9700E0E3           MVN      R0,#+151
   \   00000060   C00FC0E3           BIC      R0,R0,#0x300
   \   00000064   000090E5           LDR      R0,[R0, #+0]
   \   00000068   080010E3           TST      R0,#0x8
   \   0000006C   FAFFFF0A           BEQ      ??AT91F_LowLevelInit_3
     66           	// 4. Selection of Master Clock and Processor Clock
     67           	// select the PLL clock 
     68           	    pPMC->PMC_MCKR =  AT91C_PMC_PRES_CLK ;
   \   00000070   CF00E0E3           MVN      R0,#+207
   \   00000074   C00FC0E3           BIC      R0,R0,#0x300
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   001080E5           STR      R1,[R0, #+0]
     69           	    while(!(pPMC->PMC_SR & AT91C_PMC_MCKRDY));
   \                     ??AT91F_LowLevelInit_4:
   \   00000080   381080E2           ADD      R1,R0,#+56
   \   00000084   001091E5           LDR      R1,[R1, #+0]
   \   00000088   080011E3           TST      R1,#0x8
   \   0000008C   FBFFFF0A           BEQ      ??AT91F_LowLevelInit_4
     70          
     71           	    pPMC->PMC_MCKR |= AT91C_PMC_CSS_PLL_CLK  ;
   \   00000090   001090E5           LDR      R1,[R0, #+0]
   \   00000094   031081E3           ORR      R1,R1,#0x3
   \   00000098   001080E5           STR      R1,[R0, #+0]
     72           	    while(!(pPMC->PMC_SR & AT91C_PMC_MCKRDY));
   \                     ??AT91F_LowLevelInit_5:
   \   0000009C   9700E0E3           MVN      R0,#+151
   \   000000A0   C00FC0E3           BIC      R0,R0,#0x300
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \   000000A8   080010E3           TST      R0,#0x8
   \   000000AC   FAFFFF0A           BEQ      ??AT91F_LowLevelInit_5
     73          
     74          	// Set up the default interrupts handler vectors
     75          	AT91C_BASE_AIC->AIC_SVR[0] = (int) AT91F_Default_FIQ_handler ;
   \   000000B0   7F00E0E3           MVN      R0,#+127
   \   000000B4   F00EC0E3           BIC      R0,R0,#0xF00
   \   000000B8   34109FE5           LDR      R1,??AT91F_LowLevelInit_1+0x4  ;; AT91F_Default_FIQ_handler
   \   000000BC   001080E5           STR      R1,[R0, #+0]
     76          	for (i=1;i < 31; i++)
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   2C209FE5           LDR      R2,??AT91F_LowLevelInit_1+0x8  ;; AT91F_Default_IRQ_handler
     77          	{
     78          	    AT91C_BASE_AIC->AIC_SVR[i] = (int) AT91F_Default_IRQ_handler ;
   \                     ??AT91F_LowLevelInit_6:
   \   000000C8   0011A0E1           LSL      R1,R0,#+2
   \   000000CC   802F01E5           STR      R2,[R1, #-3968]
     79          	}
   \   000000D0   010080E2           ADD      R0,R0,#+1
   \   000000D4   1F0050E3           CMP      R0,#+31
   \   000000D8   FAFFFFBA           BLT      ??AT91F_LowLevelInit_6
     80          	AT91C_BASE_AIC->AIC_SPU  = (int) AT91F_Spurious_handler ;
   \   000000DC   CB00E0E3           MVN      R0,#+203
   \   000000E0   E00EC0E3           BIC      R0,R0,#0xE00
   \   000000E4   10109FE5           LDR      R1,??AT91F_LowLevelInit_1+0xC  ;; AT91F_Spurious_handler
   \   000000E8   001080E5           STR      R1,[R0, #+0]
     81          
     82          }
   \   000000EC   0EF0A0E1           MOV      PC,LR            ;; return
   \                     ??AT91F_LowLevelInit_1:
   \   000000F0   051C0D00           DC32     0xd1c05
   \   000000F4   ........           DC32     AT91F_Default_FIQ_handler
   \   000000F8   ........           DC32     AT91F_Default_IRQ_handler
   \   000000FC   ........           DC32     AT91F_Spurious_handler
     83          

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     AT91F_LowLevelInit     0


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     AT91F_LowLevelInit  256

 
 256 bytes in segment CODE
 
 256 bytes of CODE memory

Errors: none
Warnings: none
