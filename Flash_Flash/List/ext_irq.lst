##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.40A/W32 EVALUATION    22/Oct/2006  15:52:06 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
# Time limited license: 20 days left                                         #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\SPA_iar\Compil\ext_irq.c                          #
#    Command line    =  D:\SPA_iar\Compil\ext_irq.c -D ESS -lC               #
#                       D:\SPA_iar\Compil\Flash_Flash\List\ -lA              #
#                       D:\SPA_iar\Compil\Flash_Flash\List\ -o               #
#                       D:\SPA_iar\Compil\Flash_Flash\Obj\ -z9 --debug       #
#                       --cpu_mode arm --endian little --cpu ARM7TDMI        #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config C:\IAR\ARM\LIB\dl4tpainl8n.h -I        #
#                       D:\SPA_iar\Compil\srciar\ -I                         #
#                       D:\SPA_iar\Compil\..\..\ -I C:\IAR\ARM\INC\          #
#    List file       =  D:\SPA_iar\Compil\Flash_Flash\List\ext_irq.lst       #
#    Object file     =  D:\SPA_iar\Compil\Flash_Flash\Obj\ext_irq.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\SPA_iar\Compil\ext_irq.c
      1          //*----------------------------------------------------------------------------
      2          //*      ATMEL Microcontroller Software Support  -  ROUSSET  -
      3          //*----------------------------------------------------------------------------
      4          //* The software is delivered "AS IS" without warranty or condition of any
      5          //* kind, either express, implied or statutory. This includes without
      6          //* limitation any warranty or condition with respect to merchantability or
      7          //* fitness for any particular purpose, or against the infringements of
      8          //* intellectual property rights of others.
      9          //*----------------------------------------------------------------------------
     10          //* File Name           : ext_irq.c
     11          //* Object              : External interrupt handler for irq
     12          //*                     : Use LED5 & LED6 for status interrupt
     13          //* 1.0 24/Jun/04 JPP   : Creation
     14          //* 1.2 29/Aug/05 JPP   : Update AIC definion
     15          //*----------------------------------------------------------------------------
     16          
     17          // Include Standard LIB  files
     18          #include "Board.h"
     19          

   \                                 In segment DATA_Z, align 4, align-sorted
     20          int status_irq = 0 ;
   \                     status_irq:
   \   00000000                      DS8 4
     21          
     22          //*----------------------------------------------------------------------------
     23          //* Function Name       : at91_IRQ0_handler
     24          //* Object              : Irq Handler called by the IRQ0 interrupt with AT91
     25          //*                       compatibility
     26          //*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
     27          __ramfunc void at91_IRQ0_handler(void)
     28          {
     29              if (status_irq == 0) status_irq = 1;
   \                     at91_IRQ0_handler:
   \   00000000   4C009FE5           LDR      R0,??at91_IRQ0_handler_0  ;; status_irq
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0110A003           MOVEQ    R1,#+1
     30              else status_irq = 0 ;
   \   00000010   0010A013           MOVNE    R1,#+0
   \   00000014   001080E5           STR      R1,[R0, #+0]
     31              //* Read the output state
     32              if ( (AT91F_PIO_GetInput(AT91C_BASE_PIOA) & LED2 ) == LED2 )
   \   00000018   C300E0E3           MVN      R0,#+195
   \   0000001C   B00EC0E3           BIC      R0,R0,#0xB00
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   0210A0E3           MOV      R1,#+2
   \   00000028   020010E3           TST      R0,#0x2
     33              {
     34                  AT91F_PIO_ClearOutput( AT91C_BASE_PIOA, LED2 );
   \   0000002C   CB00E013           MVNNE    R0,#+203
     35              }
     36              else
     37              {
     38                  AT91F_PIO_SetOutput( AT91C_BASE_PIOA, LED2 );
   \   00000030   CF00E003           MVNEQ    R0,#+207
   \   00000034   B00EC0E3           BIC      R0,R0,#0xB00
   \   00000038   001080E5           STR      R1,[R0, #+0]
     39              }
     40              //* while SW3 is push loop
     41              while ( (AT91F_PIO_GetInput(AT91C_BASE_PIOA) & SW3_MASK ) != SW3_MASK );
   \                     ??at91_IRQ0_handler_1:
   \   0000003C   C300E0E3           MVN      R0,#+195
   \   00000040   B00EC0E3           BIC      R0,R0,#0xB00
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   800C10E3           TST      R0,#0x8000
   \   0000004C   FAFFFF0A           BEQ      ??at91_IRQ0_handler_1
     42          }
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     ??at91_IRQ0_handler_0:
   \   00000054   ........           DC32     status_irq
     43          
     44          //*----------------------------------------------------------------------------
     45          //* Function Name       : FIQ_init_handler
     46          //* Object              : Irq Handler called by the FIQ interrupt with AT91
     47          //*                       compatibility
     48          ///*----------------------------------------------------------------------------

   \                                 In segment CODE_I, align 4, keep-with-next
     49          __ramfunc void FIQ_init_handler(void)
     50          {
     51              //* Read the output state
     52              if ( (AT91F_PIO_GetInput(AT91C_BASE_PIOA) & LED3 ) == LED3 )
   \                     FIQ_init_handler:
   \   00000000   C300E0E3           MVN      R0,#+195
   \   00000004   B00EC0E3           BIC      R0,R0,#0xB00
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   0410A0E3           MOV      R1,#+4
   \   00000010   040010E3           TST      R0,#0x4
     53              {
     54                  AT91F_PIO_ClearOutput( AT91C_BASE_PIOA, LED3 );
   \   00000014   CB00E013           MVNNE    R0,#+203
     55              }
     56              else
     57              {
     58                  AT91F_PIO_SetOutput( AT91C_BASE_PIOA, LED3 );
   \   00000018   CF00E003           MVNEQ    R0,#+207
   \   0000001C   B00EC0E3           BIC      R0,R0,#0xB00
   \   00000020   001080E5           STR      R1,[R0, #+0]
     59              }
     60          
     61          }
   \   00000024   1EFF2FE1           BX       LR               ;; return
     62          

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     FIQ_init_handler      0
     at91_IRQ0_handler     0


   Segment part sizes:

     Function/Label    Bytes
     --------------    -----
     status_irq           4
     at91_IRQ0_handler   88
     FIQ_init_handler    40
      Others             32

 
 136 bytes in segment CODE_I
   4 bytes in segment DATA_Z
  24 bytes in segment INITTAB
 
 128 bytes of CODE memory (+ 32 bytes shared)
   4 bytes of DATA memory

Errors: none
Warnings: none
